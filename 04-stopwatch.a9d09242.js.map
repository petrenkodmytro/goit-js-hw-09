{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,sBACrCC,EAAaF,SAASC,cAAc,qBACpCE,EAAcH,SAASC,cAAc,sBACrCG,EAAcJ,SAASC,cAAc,mBACrCI,EAAeL,SAASC,cAAc,oBACtCK,EAAiBN,SAASC,cAAc,sBACxCM,EAAiBP,SAASC,cAAc,sBACxCO,EAAqBR,SAASC,cAAc,0BAElD,IAAIQ,EAAc,KA8ClB,SAASC,EAAUC,GAGjB,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAeZ,MAAO,C,KAZME,EAAeC,KAAKC,MAAMP,EAAKI,I,MAE9BC,EAAeC,KAAKC,MAAMP,EAAMI,EAAOD,I,QAErCE,EAAeC,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,I,QAEhDI,EACdC,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAbrB,M,YAgBKI,EAAeC,KAAKC,MAAMP,EAAM,IAAQ,K,CAK9D,SAASK,EAAeG,GAEwD,OAAvEC,OAAOD,GAAOE,SAAS,EAAG,I,CAtEnCtB,EAAYuB,iBAAiB,SAI7B,WAEoD,MAA5CC,EAAYC,KAAKC,MACvBhB,EAAciB,aAAY,KAED3B,EAAX4B,UAAW,EAGvB,MAAMC,EAAkBlB,EAFJc,KAAKC,MACSF,IAG5BM,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,EAAOC,YAAEA,GAAgBL,EACvDxB,EAAY8B,YAAcL,EAC1BxB,EAAa6B,YAAcJ,EAC3BxB,EAAe4B,YAAcH,EAC7BxB,EAAe2B,YAAcF,EAC7BxB,EAAmB0B,YAAcD,CAAW,GAC3C,G,IAnBL/B,EAAWoB,iBAAiB,SAsB5B,WAESa,cAAO1B,GAEOV,EAAT4B,UAAW,EAGvBS,EAAAvC,GAASwC,OAAOC,QAAQ,UAAW,sBAAuB,MAEnB,MAAjCT,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,EAAOC,YAAEA,GAAgBvB,EAAU,GACjEN,EAAY8B,YAAcL,EAC1BxB,EAAa6B,YAAcJ,EAC3BxB,EAAe4B,YAAcH,EAC7BxB,EAAe2B,YAAcF,EAC7BxB,EAAmB0B,YAAcD,C,IAnCnC9B,EAAYmB,iBAAiB,SAsC7B,WAAiC","sources":["src/js/04-stopwatch.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst btnStartRef = document.querySelector('button[data-start]');\nconst btnStopRef = document.querySelector('button[data-stop]');\nconst btnPauseRef = document.querySelector('button[data-pause]');\nconst spanDaysRef = document.querySelector('span[data-days]');\nconst spanHoursRef = document.querySelector('span[data-hours]');\nconst spanMinutesRef = document.querySelector('span[data-minutes]');\nconst spanSecondsRef = document.querySelector('span[data-seconds]');\nconst spanMiliSecondsRef = document.querySelector('span[data-miliseconds]');\n\nlet StopwatchId = null;\n\nbtnStartRef.addEventListener('click', onStartStopwatchClick);\nbtnStopRef.addEventListener('click', onStopStopwatchClick);\nbtnPauseRef.addEventListener('click', onPauseStopwatchClick);\n\nfunction onStartStopwatchClick() {\n  // Date.now() не створює екземпляр, повертає поточний час у мілісекундах\n  const startTime = Date.now();\n  StopwatchId = setInterval(() => {\n    // деактивація кнопки старта\n    btnStartRef.disabled = true;\n    const currentTime = Date.now();\n    let remainingTime = currentTime - startTime;\n    const timerComponents = convertMs(remainingTime);\n    // деструктурізація timerComponents\n    const { days, hours, minutes, seconds, miliseconds } = timerComponents;\n    spanDaysRef.textContent = days;\n    spanHoursRef.textContent = hours;\n    spanMinutesRef.textContent = minutes;\n    spanSecondsRef.textContent = seconds;\n    spanMiliSecondsRef.textContent = miliseconds;\n  }, 10);\n}\n\nfunction onStopStopwatchClick() {\n  // зупинка Stopwatch\n  clearInterval(StopwatchId);\n  // активація кнопки старта\n  btnStartRef.disabled = false;\n  // console.log('stop Stopwatch');\n  // Notiflix.Notify.success('Stopwatch is stoped');\n  Notiflix.Report.success('Success', 'Stopwatch is stoped', 'Ok');\n  // деструктурізація результату роботи функції convertMs()\n  const { days, hours, minutes, seconds, miliseconds } = convertMs(0);\n  spanDaysRef.textContent = days;\n  spanHoursRef.textContent = hours;\n  spanMinutesRef.textContent = minutes;\n  spanSecondsRef.textContent = seconds;\n  spanMiliSecondsRef.textContent = miliseconds;\n}\n\nfunction onPauseStopwatchClick() {\n  \n}\n\nfunction convertMs(ms) {\n  // Для підрахунку значень використовуй готову функцію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = addLeadingZero(Math.floor(ms / day));\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n  // Remaining miliseconds\n  const miliseconds = addLeadingZero(Math.floor((ms % 1000) / 10));\n\n  return { days, hours, minutes, seconds, miliseconds };\n}\n\nfunction addLeadingZero(value) {\n  // функція addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення у форматі xx:xx:xx:xx\n  return String(value).padStart(2, '0');\n}\n\n// Метод getTime() повертає числове значення цієї дати (timestamp) - кількість мілісекунд, що минула з півночі 1 січня 1970 року.\n// const date = new Date();\n// console.log(date.getTime());\n\n//----1------\n// Вот пример кода для создания секундомера и кнопки \"Пауза\":\n// // Инициализация переменных\n// let timer = document.getElementById('timer');\n// let pauseButton = document.getElementById('pause');\n// let startTime, elapsedTime = 0, timerInterval;\n\n// // Функция для обновления таймера\n// function updateTimer() {\n//   let ms = elapsedTime;\n//   let seconds = Math.floor(ms / 1000);\n//   let minutes = Math.floor(seconds / 60);\n//   let hours = Math.floor(minutes / 60);\n//   ms = ms % 1000;\n//   seconds = seconds % 60;\n//   minutes = minutes % 60;\n  \n//   timer.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n// }\n\n// // Функция для запуска таймера\n// function startTimer() {\n//   startTime = Date.now() - elapsedTime;\n//   timerInterval = setInterval(function() {\n//     elapsedTime = Date.now() - startTime;\n//     updateTimer();\n//   }, 10);\n// }\n\n// // Функция для остановки таймера\n// function stopTimer() {\n//   clearInterval(timerInterval);\n// }\n\n// // Обработчик клика на кнопке \"Пауза\"\n// pauseButton.addEventListener('click', function() {\n//   if (pauseButton.textContent === 'Пауза') {\n//     pauseButton.textContent = 'Продолжить';\n//     stopTimer();\n//   } else {\n//     pauseButton.textContent = 'Пауза';\n//     startTimer();\n//   }\n// });\n\n// // Запуск таймера\n// startTimer();\n\n\n//-----2-----\n// let startTime; // the start time in milliseconds\n// let elapsedTime = 0; // the elapsed time in milliseconds\n// let timerInterval; // the timer interval ID\n// let isPaused = true; // whether the timer is currently paused\n\n// // update the display with the current elapsed time\n// function updateDisplay() {\n//   const minutes = Math.floor(elapsedTime / 60000);\n//   const seconds = Math.floor((elapsedTime % 60000) / 1000);\n//   const milliseconds = Math.floor((elapsedTime % 1000) / 10);\n//   const display = `${minutes}:${seconds\n//     .toString()\n//     .padStart(2, \"0\")}:${milliseconds.toString().padStart(2, \"0\")}`;\n//   document.getElementById(\"display\").textContent = display;\n// }\n\n// // start the stopwatch\n// function startTimer() {\n//   startTime = Date.now() - elapsedTime;\n//   timerInterval = setInterval(() => {\n//     elapsedTime = Date.now() - startTime;\n//     updateDisplay();\n//   }, 10);\n//   isPaused = false;\n// }\n\n// // pause the stopwatch\n// function pauseTimer() {\n//   clearInterval(timerInterval);\n//   isPaused = true;\n// }\n\n// // reset the stopwatch\n// function resetTimer() {\n//   clearInterval(timerInterval);\n//   startTime = null;\n//   elapsedTime = 0;\n//   updateDisplay();\n//   isPaused = true;\n// }\n\n// // add event listeners to the buttons\n// document.getElementById(\"start\").addEventListener(\"click\", () => {\n//   if (isPaused) {\n//     startTimer();\n//   } else {\n//     pauseTimer();\n//   }\n// });\n\n// document.getElementById(\"pause\").addEventListener(\"click\", () => {\n//   if (isPaused) {\n//     startTimer();\n//   } else {\n//     pauseTimer();\n//   }\n// });\n\n// document.getElementById(\"reset\").addEventListener(\"click\", resetTimer);\n"],"names":["$7Y9D8","parcelRequire","$e794765a5a0dc3fb$var$btnStartRef","document","querySelector","$e794765a5a0dc3fb$var$btnStopRef","$e794765a5a0dc3fb$var$btnPauseRef","$e794765a5a0dc3fb$var$spanDaysRef","$e794765a5a0dc3fb$var$spanHoursRef","$e794765a5a0dc3fb$var$spanMinutesRef","$e794765a5a0dc3fb$var$spanSecondsRef","$e794765a5a0dc3fb$var$spanMiliSecondsRef","$e794765a5a0dc3fb$var$StopwatchId","$e794765a5a0dc3fb$var$convertMs","ms","minute","second","hour","day","$e794765a5a0dc3fb$var$addLeadingZero","Math","floor","value","String","padStart","addEventListener","startTime","Date","now","setInterval","disabled","timerComponents","days","hours","minutes","seconds","miliseconds","textContent","clearInterval","$parcel$interopDefault","Report","success"],"version":3,"file":"04-stopwatch.a9d09242.js.map"}