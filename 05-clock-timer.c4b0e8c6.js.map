{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAwCmB,MAAbC,EAAQ,IA/Bd,MAWEC,SACEC,KAAKC,OAAOC,mBAAmB,YAlBJ,0G,CAqB7BC,cACEH,KAAKI,KAAKC,YAAcC,EAAAV,EAAA,GAASW,OAAO,O,CAG1CC,QACER,KAAKS,QAAUC,aAAY,KACzBV,KAAKG,aAAa,GACjB,I,CAGLQ,OACEC,cAAcZ,KAAKS,SACnBT,KAAKS,aAAUI,C,CA1BjBC,aAAYC,SAAEA,IACZf,KAAKC,OAASe,SAASC,cAAcF,GAErCf,KAAKD,SACLC,KAAKI,KAAOJ,KAAKC,OAAOgB,cAAc,SAEtCjB,KAAKG,cACLH,KAAKQ,O,GAuBe,CAAEO,SAAU,WACpCjB,EAAMM,KAAKc,MAAMC,SAAW,OAC5BrB,EAAMM,KAAKc,MAAME,MAAQ,OAWzB,SAASC,EAAUC,GAGjB,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAeU,MAAf,C,KAZME,EAAeC,KAAKC,MAAMP,EAAKI,I,MAE9BC,EAAeC,KAAKC,MAAMP,EAAMI,EAAOD,I,QAErCE,EAAeC,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,I,QAEhDI,EACdC,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAbrB,M,YAgBKI,EAAeC,KAAKC,MAAMP,EAAM,IAAQ,K,CAK9D,SAASK,EAAeG,GAEwD,OAAvEC,OAAOD,GAAOE,SAAS,EAAG,I,CAsDpB,IAnDf,MAiBEjC,SAEE,MAAMkC,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,EAAOC,YAAEA,GAAgBhB,EACrDrB,KAAK8B,OAEP9B,KAAKC,OAAOC,mBACV,YA5DmB,GAAC+B,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,EAAOC,YAAEA,KAAkB,8FAGzDJ,KAAQC,KAASC,KAAWC,KAAWC,sGA0DrDC,CAAiB,C,KAAEL,E,MAAMC,E,QAAOC,E,QAASC,E,YAASC,I,CAItD7B,QACE,GAAIR,KAAKS,QAAS,OAElBT,KAAKuC,YAAYC,UAAW,EAC5BxC,KAAKyC,WAAWD,UAAW,EAC3B,MAAME,EAAYC,KAAKC,MACvB5C,KAAKS,QAAUC,aAAY,KAEzB,IAAImC,EADgBF,KAAKC,MACOF,EAChC,MAAMT,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,EAAOC,YAAEA,GACrChB,EAAUwB,GACZ7C,KAAKI,KAAKC,YAAc,GAAG4B,KAAQC,KAASC,KAAWC,KAAWC,GAAa,GAC9E,G,CAGL1B,OACEC,cAAcZ,KAAKS,SACnBT,KAAKuC,YAAYC,UAAW,EAC5BxC,KAAKyC,WAAWD,UAAW,EAC3BxC,KAAKS,aAAUI,C,CA9CjBC,YAAYC,GACVf,KAAKC,OAASe,SAASC,cAAcF,GACrCf,KAAK8B,MAAQ,EAEb9B,KAAKD,SAELC,KAAKyC,WAAazC,KAAKC,OAAOgB,cAAc,aAC5CjB,KAAKuC,YAAcvC,KAAKC,OAAOgB,cAAc,cAC7CjB,KAAKI,KAAOJ,KAAKC,OAAOgB,cAAc,SAEtCjB,KAAKyC,WAAWD,UAAW,EAE3BxC,KAAKyC,WAAWK,iBAAiB,QAAS9C,KAAKW,KAAKoC,KAAK/C,OACzDA,KAAKuC,YAAYO,iBAAiB,QAAS9C,KAAKQ,MAAMuC,KAAK/C,M,GAqCtC","sources":["src/js/05-clock-timer.js"],"sourcesContent":["import moment from 'moment';\n\n//---class Clock---\nconst getTemplateClock = () => `\n<div class=\"clock\">\n  <h1 class=\"title\">Instance of class Clock</h1>\n  <p class=\"text\"></p>\n</div>`;\n\nclass Clock {\n  constructor({ selector }) {\n    this.parent = document.querySelector(selector);\n\n    this.render();\n    this.text = this.parent.querySelector('.text');\n\n    this.updateValue();\n    this.start();\n  }\n\n  render() {\n    this.parent.insertAdjacentHTML('beforeend', getTemplateClock());\n  }\n\n  updateValue() {\n    this.text.textContent = moment().format('LLLL');\n  }\n\n  start() {\n    this.timerId = setInterval(() => {\n      this.updateValue();\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.timerId);\n    this.timerId = undefined;\n  }\n}\n// створення екземпляра class Clock\nconst clock = new Clock({ selector: '.clock' });\nclock.text.style.fontSize = '30px';\nclock.text.style.color = 'blue';\n\n//---class Timer---\nconst getTemplateTimer = ({ days, hours, minutes, seconds, miliseconds }) => `\n<div class=\"timer\">\n  <h1 class=\"title\">Instance of class Timer</h1>\n  <p class=\"text\">${days}:${hours}:${minutes}:${seconds}:${miliseconds}</p>\n  <button class=\"btn-stop\">stop</button>\n  <button class=\"btn-start\">start</button>\n</div>`;\n\nfunction convertMs(ms) {\n  // Для підрахунку значень використовуй готову функцію convertMs, де ms - різниця між кінцевою і поточною датою в мілісекундах.\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = addLeadingZero(Math.floor(ms / day));\n  // Remaining hours\n  const hours = addLeadingZero(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = addLeadingZero(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  );\n  // Remaining miliseconds\n  const miliseconds = addLeadingZero(Math.floor((ms % 1000) / 10));\n  // результат роботи функції\n  return { days, hours, minutes, seconds, miliseconds };\n}\n\nfunction addLeadingZero(value) {\n  // функція addLeadingZero(value), яка використовує метод padStart() і перед рендерингом інтефрейсу форматує значення у форматі xx:xx:xx:xx\n  return String(value).padStart(2, '0');\n}\n\nclass Timer {\n  constructor(selector) {\n    this.parent = document.querySelector(selector);\n    this.value = 0;\n\n    this.render();\n\n    this.stopButton = this.parent.querySelector('.btn-stop');\n    this.startButton = this.parent.querySelector('.btn-start');\n    this.text = this.parent.querySelector('.text');\n\n    this.stopButton.disabled = true;\n\n    this.stopButton.addEventListener('click', this.stop.bind(this));\n    this.startButton.addEventListener('click', this.start.bind(this));\n  }\n\n  render() {\n    // this.parent.innerHTML = '';\n    const { days, hours, minutes, seconds, miliseconds } = convertMs(\n      this.value\n    );\n    this.parent.insertAdjacentHTML(\n      'beforeend',\n      getTemplateTimer({ days, hours, minutes, seconds, miliseconds })\n    );\n  }\n\n  start() {\n    if (this.timerId) return;\n\n    this.startButton.disabled = true;\n    this.stopButton.disabled = false;\n    const startTime = Date.now();\n    this.timerId = setInterval(() => {\n      const currentTime = Date.now();\n      let elapsedTime = currentTime - startTime;\n      const { days, hours, minutes, seconds, miliseconds } =\n        convertMs(elapsedTime);\n      this.text.textContent = `${days}:${hours}:${minutes}:${seconds}:${miliseconds}`;\n    }, 10);\n  }\n\n  stop() {\n    clearInterval(this.timerId);\n    this.startButton.disabled = false;\n    this.stopButton.disabled = true;\n    this.timerId = undefined;\n  }\n}\n// створення екземпляра class Timer\nconst timer1 = new Timer('.timer');\n"],"names":["$cxTnx","parcelRequire","$1e8c5d383cf4a73e$var$clock","render","this","parent","insertAdjacentHTML","updateValue","text","textContent","$parcel$interopDefault","format","start","timerId","setInterval","stop","clearInterval","undefined","constructor","selector","document","querySelector","style","fontSize","color","$1e8c5d383cf4a73e$var$convertMs","ms","minute","second","hour","day","$1e8c5d383cf4a73e$var$addLeadingZero","Math","floor","value","String","padStart","days","hours","minutes","seconds","miliseconds","$1e8c5d383cf4a73e$var$getTemplateTimer","startButton","disabled","stopButton","startTime","Date","now","elapsedTime","addEventListener","bind"],"version":3,"file":"05-clock-timer.c4b0e8c6.js.map"}